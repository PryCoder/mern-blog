import { useEffect, useState } from 'react';
import { useSelector } from 'react-redux';
import {
  HiAnnotation,
  HiArrowNarrowUp,
  HiDocumentText,
  HiOutlineUserGroup,
  HiDownload // Import the download icon
} from 'react-icons/hi';
import { Button, Table } from 'flowbite-react';
import { Link } from 'react-router-dom';
import {
  LineChart,
  Line,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
  Legend,
  ResponsiveContainer,
} from 'recharts';
import jsPDF from 'jspdf';
import html2canvas from 'html2canvas';

export default function DashboardComp() {
  const [users, setUsers] = useState([]);
  const [comments, setComments] = useState([]);
  const [posts, setPosts] = useState([]);
  const [totalUsers, setTotalUsers] = useState(0);
  const [totalPosts, setTotalPosts] = useState(0);
  const [totalComments, setTotalComments] = useState(0);
  const [lastMonthUsers, setLastMonthUsers] = useState(0);
  const [lastMonthPosts, setLastMonthPosts] = useState(0);
  const [lastMonthComments, setLastMonthComments] = useState(0);
  const { currentUser } = useSelector((state) => state.user);
  
  // Loading and Error States
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    const fetchUsers = async () => {
      try {
        const res = await fetch('/api/user/getusers?limit=5');
        const data = await res.json();
        if (res.ok) {
          setUsers(data.users);
          setTotalUsers(data.totalUsers);
          setLastMonthUsers(data.lastMonthUsers);
        } else {
          setError(data.message || 'Failed to fetch users');
        }
      } catch (error) {
        setError(error.message);
      }
    };

    const fetchPosts = async () => {
      try {
        const res = await fetch('/api/post/getposts?limit=5');
        const data = await res.json();
        if (res.ok) {
          setPosts(data.posts);
          setTotalPosts(data.totalPosts);
          setLastMonthPosts(data.lastMonthPosts);
        } else {
          setError(data.message || 'Failed to fetch posts');
        }
      } catch (error) {
        setError(error.message);
      }
    };

    const fetchComments = async () => {
      try {
        const res = await fetch('/api/comment/getcomments?limit=5');
        const data = await res.json();
        if (res.ok) {
          setComments(data.comments);
          setTotalComments(data.totalComments);
          setLastMonthComments(data.lastMonthComments);
        } else {
          setError(data.message || 'Failed to fetch comments');
        }
      } catch (error) {
        setError(error.message);
      }
    };

    if (currentUser.isAdmin) {
      setLoading(true);
      Promise.all([fetchUsers(), fetchPosts(), fetchComments()])
        .finally(() => setLoading(false));
    }
  }, [currentUser]);

  // Prepare data for the graph
  const chartData = [
    {
      name: 'Users',
      lastMonth: lastMonthUsers,
      total: totalUsers,
    },
    {
      name: 'Comments',
      lastMonth: lastMonthComments,
      total: totalComments,
    },
    {
      name: 'Posts',
      lastMonth: lastMonthPosts,
      total: totalPosts,
    },
  ];

  // Function to download PDF
  const downloadPDF = () => {
    const input = document.getElementById('chart'); // Get the chart container
    html2canvas(input).then((canvas) => {
      const imgData = canvas.toDataURL('image/png');
      const pdf = new jsPDF();
      const imgWidth = 190; // Set image width
      const pageHeight = pdf.internal.pageSize.height; // Get page height
      const imgHeight = (canvas.height * imgWidth) / canvas.width; // Calculate image height based on width
      const heightLeft = imgHeight;

      let position = (pageHeight - imgHeight) / 2; // Center the image vertically

      pdf.addImage(imgData, 'PNG', (pdf.internal.pageSize.width - imgWidth) / 2, position, imgWidth, imgHeight); // Center the image horizontally
      position += heightLeft;

      pdf.text(`Report generated by: ${currentUser.username}`, 10, position + 10); // Add user info
      pdf.save('dashboard-report.pdf'); // Save the PDF
    });
  };

  return (
    <div className="p-3 md:mx-auto">
      {loading && <div className="text-center">Loading...</div>}
      {error && <div className="text-red-500 text-center">{error}</div>}
      
      {!loading && !error && (
        <>
          <div className="flex-wrap flex gap-4 justify-center">
            {/* User Card */}
            <div className="flex flex-col p-3 dark:bg-slate-800 gap-4 md:w-72 w-full rounded-md shadow-md">
              <div className="flex justify-between">
                <div>
                  <h3 className="text-gray-500 text-md uppercase">Total Users</h3>
                  <p className="text-2xl">{totalUsers}</p>
                </div>
                <HiOutlineUserGroup className="bg-teal-600 text-white rounded-full text-5xl p-3 shadow-lg" />
              </div>
              <div className="flex gap-2 text-sm">
                <span className="text-green-500 flex items-center">
                  <HiArrowNarrowUp />
                  {lastMonthUsers}
                </span>
                <div className="text-gray-500">Last month</div>
              </div>
            </div>

            {/* Comments Card */}
            <div className="flex flex-col p-3 dark:bg-slate-800 gap-4 md:w-72 w-full rounded-md shadow-md">
              <div className="flex justify-between">
                <div>
                  <h3 className="text-gray-500 text-md uppercase">Total Comments</h3>
                  <p className="text-2xl">{totalComments}</p>
                </div>
                <HiAnnotation className="bg-indigo-600 text-white rounded-full text-5xl p-3 shadow-lg" />
              </div>
              <div className="flex gap-2 text-sm">
                <span className="text-green-500 flex items-center">
                  <HiArrowNarrowUp />
                  {lastMonthComments}
                </span>
                <div className="text-gray-500">Last month</div>
              </div>
            </div>

            {/* Posts Card */}
            <div className="flex flex-col p-3 dark:bg-slate-800 gap-4 md:w-72 w-full rounded-md shadow-md">
              <div className="flex justify-between">
                <div>
                  <h3 className="text-gray-500 text-md uppercase">Total Posts</h3>
                  <p className="text-2xl">{totalPosts}</p>
                </div>
                <HiDocumentText className="bg-lime-600 text-white rounded-full text-5xl p-3 shadow-lg" />
              </div>
              <div className="flex gap-2 text-sm">
                <span className="text-green-500 flex items-center">
                  <HiArrowNarrowUp />
                  {lastMonthPosts}
                </span>
                <div className="text-gray-500">Last month</div>
              </div>
            </div>
          </div>

          {/* Graph Section */}
          <div className="mt-8">
            <div className="flex justify-end mb-4"> {/* Flexbox to align right */}
              <button onClick={downloadPDF} outline className="flex justify-center items-center rounded-lg w-10 h-10 shadow-lg text-white bg-green-500 hover:bg-green-700">
                <HiDownload className="mr-1 2xl"  /> {/* Download Icon */}
              </button>
            </div>
            <h2 className="text-center text-lg font-semibold mb-4">Data Trends</h2>
            <div id="chart"> {/* ID for capturing the chart */}
              <ResponsiveContainer width="100%" height={300}>
                <LineChart data={chartData}>
                  <CartesianGrid strokeDasharray="3 3" />
                  <XAxis dataKey="name" />
                  <YAxis />
                  <Tooltip />
                  <Legend />
                  <Line type="monotone" dataKey="lastMonth" stroke="#8884d8" activeDot={{ r: 8 }} />
                  <Line type="monotone" dataKey="total" stroke="#82ca9d" />
                </LineChart>
              </ResponsiveContainer>
            </div>
          </div>

          {/* Users Table */}
          <div className="flex flex-col w-full md:w-auto shadow-md p-2 rounded-md dark:bg-gray-800 mt-8">
            <div className="flex justify-between p-3 text-sm font-semibold">
              <h1 className="text-center p-2">Recent users</h1>
              <button type="button" className="group flex items-center justify-center p-0.5 text-center font-medium">
                <span className="flex justify-center bg-white text-gray-900 transition-all duration-75 ease-in dark:bg-gray-900 dark:text-white w-full rounded-md text-sm px-4 py-2">
                  <Link to={'/dashboard?tab=users'}>See all</Link>
                </span>
              </button>
            </div>
            <Table hoverable>
              <Table.Head>
                <Table.HeadCell>User image</Table.HeadCell>
                <Table.HeadCell>Username</Table.HeadCell>
              </Table.Head>
              {users &&
                users.map((user) => (
                  <Table.Body key={user._id} className="divide-y">
                    <Table.Row className="bg-white dark:border-gray-700 dark:bg-gray-800">
                      <Table.Cell>
                        <img src={user.profilePicture} alt="user" className="w-10 h-10 rounded-full bg-gray-500" />
                      </Table.Cell>
                      <Table.Cell>{user.username}</Table.Cell>
                    </Table.Row>
                  </Table.Body>
                ))}
            </Table>
          </div>

          {/* Comments Table */}
          <div className="flex flex-col w-full md:w-auto shadow-md p-2 rounded-md dark:bg-gray-800 mt-8">
            <div className="flex justify-between p-3 text-sm font-semibold">
              <h1 className="text-center p-2">Recent comments</h1>
              <button type="button" className="group flex items-center justify-center p-0.5 text-center font-medium">
                <span className="flex justify-center bg-white text-gray-900 transition-all duration-75 ease-in dark:bg-gray-900 dark:text-white w-full rounded-md text-sm px-4 py-2">
                  <Link to={'/dashboard?tab=comments'}>See all</Link>
                </span>
              </button>
            </div>
            <Table hoverable>
              <Table.Head>
                <Table.HeadCell>Comment Text</Table.HeadCell>
                <Table.HeadCell>User</Table.HeadCell>
              </Table.Head>
              {comments &&
                comments.map((comment) => (
                  <Table.Body key={comment._id} className="divide-y">
                    <Table.Row className="bg-white dark:border-gray-700 dark:bg-gray-800">
                      <Table.Cell>{comment.text}</Table.Cell>
                      <Table.Cell>{comment.username}</Table.Cell>
                    </Table.Row>
                  </Table.Body>
                ))}
            </Table>
          </div>

          {/* Posts Table */}
          <div className="flex flex-col w-full md:w-auto shadow-md p-2 rounded-md dark:bg-gray-800 mt-8">
            <div className="flex justify-between p-3 text-sm font-semibold">
              <h1 className="text-center p-2">Recent posts</h1>
              <button type="button" className="group flex items-center justify-center p-0.5 text-center font-medium">
                <span className="flex justify-center bg-white text-gray-900 transition-all duration-75 ease-in dark:bg-gray-900 dark:text-white w-full rounded-md text-sm px-4 py-2">
                  <Link to={'/dashboard?tab=posts'}>See all</Link>
                </span>
              </button>
            </div>
            <Table hoverable>
              <Table.Head>
                <Table.HeadCell>Post Title</Table.HeadCell>
                <Table.HeadCell>User</Table.HeadCell>
              </Table.Head>
              {posts &&
                posts.map((post) => (
                  <Table.Body key={post._id} className="divide-y">
                    <Table.Row className="bg-white dark:border-gray-700 dark:bg-gray-800">
                      <Table.Cell>{post.title}</Table.Cell>
                      <Table.Cell>{post.username}</Table.Cell>
                    </Table.Row>
                  </Table.Body>
                ))}
            </Table>
          </div>
        </>
      )}
    </div>
  );
}
